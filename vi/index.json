[
{
	"uri": "/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nCI/CD là gì? Lợi ích của CI/CD trong DevOps Các công cụ phổ biến cho CI/CD Thách thức khi triển khai CI/CD CI / CD là gì? Continuous Integration (CI)\nCI (Continuous Integration) là một phương pháp phát triển phần mềm trong đó các lập trình viên liên tục tích hợp mã nguồn mới vào một repository chung. Mỗi khi có sự thay đổi mã nguồn, hệ thống sẽ tự động build và chạy các bài test để kiểm tra tính đúng đắn của mã. Mục tiêu: Đảm bảo rằng các thay đổi mã nguồn có thể tích hợp dễ dàng và không gây ra lỗi cho hệ thống chung. CI giúp phát hiện lỗi sớm trong quá trình phát triển, giúp giảm thiểu các vấn đề khi tích hợp mã từ nhiều nguồn khác nhau. Continuous Delivery (CD) và Continuous Deployment (CD)\nContinuous Delivery: Sau khi mã nguồn được tích hợp thành công (CI), CD đảm bảo rằng mã nguồn luôn sẵn sàng để được triển khai lên môi trường sản xuất hoặc bất kỳ môi trường nào khác. Quá trình triển khai có thể được thực hiện tự động hoặc thông qua sự cho phép của con người. Continuous Deployment: Đây là một cấp độ cao hơn của Continuous Delivery, nơi mà mỗi thay đổi mã nguồn sau khi vượt qua các bài kiểm tra sẽ được tự động triển khai trực tiếp lên môi trường sản xuất mà không cần sự can thiệp của con người. Tại sao CI/CD lại quan trọng trong phát triển phần mềm hiện đại?\nNhanh chóng và liên tục: Trong bối cảnh phát triển phần mềm ngày nay, việc phát hành phần mềm nhanh chóng và liên tục là một yêu cầu quan trọng. CI/CD giúp đảm bảo rằng các tính năng mới và các bản sửa lỗi có thể được triển khai nhanh chóng đến người dùng. Giảm thiểu rủi ro: CI/CD giúp giảm thiểu rủi ro bằng cách phát hiện lỗi sớm trong quá trình phát triển và đảm bảo rằng mã nguồn luôn trong tình trạng sẵn sàng để triển khai. Tự động hóa quy trình: CI/CD giúp tự động hóa quy trình từ tích hợp đến triển khai, giúp giảm tải công việc cho các đội ngũ phát triển và vận hành. Lợi ích của CI / CD trong DevOps Tự động hóa, giảm thiểu lỗi do con người\nCI/CD tự động hóa các bước như build, test, và deploy, giảm thiểu sự can thiệp của con người trong quy trình này. Giúp tăng cường hiệu quả, giảm thiểu lỗi xảy ra do sai sót của con người. Nhanh chóng đưa tính năng mới ra thị trường\nCI/CD giúp các đội ngũ phát triển có thể đưa các tính năng mới, cải tiến và bản sửa lỗi đến tay người dùng một cách nhanh chóng. Doanh nghiệp có thể phản ứng nhanh với yêu cầu thị trường và duy trì lợi thế cạnh tranh. Tăng cường khả năng hợp tác giữa các đội ngũ phát triển và vận hành\nCI/CD là một phần quan trọng của DevOps, nơi mà các đội ngũ phát triển và vận hành hợp tác chặt chẽ với nhau. Việc tích hợp liên tục và triển khai liên tục giúp phá vỡ rào cản giữa các nhóm, tăng cường sự hiểu biết và phối hợp trong quá trình phát triển phần mềm. Các công cụ phổ biến cho CI / CD GitHub Actions\nGitHub Actions là một dịch vụ CI/CD tích hợp sẵn trên GitHub, cho phép bạn tự động hóa các quy trình phát triển phần mềm ngay trong repository của mình. Lợi ích: Tích hợp trực tiếp với GitHub, dễ dàng thiết lập workflows, hỗ trợ nhiều loại actions và môi trường chạy, từ Linux, macOS đến Windows. AWS CodePipeline, CodeBuild, CodeDeploy\nAWS cung cấp các dịch vụ CI/CD mạnh mẽ cho phép tích hợp và triển khai liên tục trong môi trường đám mây. Lợi ích: Tích hợp sâu với các dịch vụ khác của AWS, giúp dễ dàng xây dựng và triển khai các ứng dụng trên nền tảng AWS. Jenkins\nJenkins là một trong những công cụ CI/CD phổ biến nhất hiện nay, cung cấp khả năng tự động hóa quy trình từ build, test đến deploy. Lợi ích: Jenkins là mã nguồn mở, có thể dễ dàng tích hợp với nhiều công cụ khác như Git, Docker, và Kubernetes. Nó cũng có một cộng đồng lớn với rất nhiều plugin hỗ trợ. GitLab CI/CD\nGitLab cung cấp một giải pháp CI/CD tích hợp sẵn, giúp người dùng dễ dàng thiết lập pipeline ngay trong repository của họ. Lợi ích: GitLab CI/CD có thể quản lý toàn bộ quy trình từ mã nguồn đến triển khai với giao diện đơn giản và tích hợp chặt chẽ với GitLab. CircleCI\nCircleCI là một nền tảng CI/CD dưới dạng dịch vụ, hỗ trợ mạnh mẽ cho các dự án sử dụng container và microservices. Lợi ích: CircleCI có tốc độ build và deploy nhanh, hỗ trợ môi trường tự định nghĩa bằng Docker. Thách thức khi triển khai CI / CD Độ phức tạp khi thiết lập\nThiết lập và cấu hình một pipeline CI/CD phức tạp có thể đòi hỏi kiến thức sâu rộng về công cụ và quy trình. Quản lý các tệp cấu hình, môi trường và tích hợp với các công cụ khác có thể gây khó khăn, đặc biệt là với những dự án lớn. Bảo mật\nViệc tự động hóa triển khai có thể tạo ra lỗ hổng bảo mật nếu không được cấu hình đúng cách. Quản lý thông tin nhạy cảm như khóa API, thông tin đăng nhập trong pipeline cần được thực hiện cẩn thận. Quản lý tài nguyên và chi phí\nKhi sử dụng các dịch vụ cloud cho CI/CD, việc quản lý tài nguyên không hiệu quả có thể dẫn đến chi phí cao. Cần có chiến lược để tối ưu hóa tài nguyên, giảm thiểu chi phí trong quá trình triển khai tự động. "
},
{
	"uri": "/vi/",
	"title": "Mở đầu",
	"tags": [],
	"description": "",
	"content": "Thiết lập CI/CD với GitHub Actions Chào mừng đến với workshop, nơi đây bạn sẽ khám phá và áp dụng các kỹ thuật CI/CD để tối ưu hóa quy trình phát triển phần mềm. Workshop được chia thành ba phần chính:\nTìm hiểu về CI/CD: Chúng ta sẽ bắt đầu bằng việc khám phá khái niệm CI/CD, vai trò và lợi ích của nó trong phát triển phần mềm, giúp bạn hiểu rõ hơn về quy trình tự động hóa từ tích hợp mã nguồn đến triển khai ứng dụng.\nTìm hiểu về GitHub Actions: Phần này tập trung vào GitHub Actions, công cụ CI/CD tích hợp trong GitHub. Bạn sẽ học về cách cấu hình workflows, jobs, steps và actions, cũng như các khái niệm khác liên quan để tự động hóa quy trình phát triển.\nThực hành thiết lập CI/CD cho một dự án Next.js: Chúng ta sẽ áp dụng kiến thức đã học bằng cách thiết lập một pipeline CI/CD cơ bản cho dự án Next.js. Bạn sẽ được hướng dẫn từng bước từ việc clone dự án, cài đặt dependencies, viết và chạy unit tests, đến việc cấu hình và triển khai ứng dụng lên GitHub Pages.\nMục tiêu của workshop là giúp bạn nắm vững các khái niệm CI/CD và GitHub Actions, cũng như có thể tự tin thiết lập và quản lý quy trình CI/CD cho dự án của mình.\nHãy bắt đầu và tự động hóa quy trình triển khai của bạn ngay bây giờ nhé!\nNội dung chính Giới thiệu CI/CD trên Github Actions Thiết lập CI/CD cho project "
},
{
	"uri": "/vi/2-github-actions/",
	"title": "CI/CD trên Github Actions",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nGithub Actions là gì? Workflow Job Step Action Event Artifact Tích hợp với các công cụ khác Lợi ích của việc sử dụng Github Actions Github Actions là gì? GitHub Actions là một dịch vụ CI/CD tích hợp trên GitHub, cho phép bạn tự động hóa quy trình phát triển phần mềm từ việc kiểm tra mã nguồn, xây dựng, đến triển khai.\nGitHub Actions hỗ trợ tích hợp và tự động hóa quy trình phát triển ngay trong repository của bạn trên GitHub, giúp bạn dễ dàng thiết lập workflows để quản lý và triển khai ứng dụng.\nWorkflow Mô tả: Workflow là cấu hình chính trong GitHub Actions, đại diện cho toàn bộ quy trình tự động hóa. Một workflow là một tệp YAML chứa các bước và hành động cần thực hiện, từ việc build đến deploy.\nChức năng: Workflow định nghĩa các jobs và steps cần thực hiện khi một sự kiện xảy ra, như khi có pull request hoặc khi mã được đẩy lên repository. Nó có thể bao gồm nhiều jobs và steps, giúp tổ chức các tác vụ theo cách linh hoạt và dễ quản lý.\nJob Mô tả: Job là một đơn vị công việc trong workflow, thường đại diện cho một giai đoạn trong quy trình CI/CD. Một workflow có thể chứa nhiều jobs.\nChức năng: Jobs thực hiện các bước cụ thể như build, test, hoặc deploy. Các jobs có thể chạy song song hoặc tuần tự, tùy thuộc vào cấu hình của bạn.\nStep Mô tả: Step là các tác vụ cụ thể bên trong một job, bao gồm các lệnh hoặc sử dụng các actions.\nChức năng: Mỗi step thực hiện một hành động cụ thể như chạy một lệnh shell, cài đặt phụ thuộc, hoặc gọi một action từ marketplace. Steps được thực hiện theo thứ tự trong một job.\nAction Mô tả: Action là các phần tử tái sử dụng trong GitHub Actions, cung cấp các tác vụ cụ thể như cài đặt phần mềm, chạy test, hoặc deploy.\nChức năng: Actions có thể được viết bởi cộng đồng hoặc tự tạo, và có thể được sử dụng trong các workflows để thực hiện các nhiệm vụ phổ biến. Bạn có thể tìm và sử dụng các actions từ GitHub Marketplace.\nEvent Mô tả: Event là các sự kiện kích hoạt workflow trong GitHub Actions, như push code, pull request, hoặc các sự kiện từ GitHub API.\nChức năng: Các event xác định khi nào và tại sao một workflow sẽ được kích hoạt. Bạn có thể cấu hình workflows để chạy tự động dựa trên các sự kiện cụ thể.\nArtifact Mô tả: Artifact là các tệp hoặc kết quả được tạo ra trong quá trình thực hiện workflow và có thể được lưu trữ và sử dụng trong các bước tiếp theo.\nChức năng: Artifacts thường được sử dụng để lưu trữ kết quả build, logs, hoặc các tệp cần thiết cho các bước tiếp theo trong workflow.\nTích hợp với các dịch vụ và công cụ khác GitHub Actions tích hợp chặt chẽ với các dịch vụ và công cụ khác, giúp bạn mở rộng khả năng của pipeline CI/CD. Bạn có thể tích hợp với các dịch vụ cloud như AWS cũng như các công cụ như Docker, Kubernetes, và nhiều hơn nữa. Lợi ích của việc sử dụng GitHub Actions Tích hợp trực tiếp: GitHub Actions tích hợp trực tiếp với GitHub, giúp bạn quản lý quy trình phát triển ngay trong repository của mình mà không cần sử dụng công cụ CI/CD ngoài.\nTùy chỉnh linh hoạt: Với GitHub Actions, bạn có thể dễ dàng tùy chỉnh workflows và sử dụng các actions từ marketplace để phù hợp với nhu cầu cụ thể của dự án.\nTốc độ và hiệu quả: Tự động hóa quy trình CI/CD giúp giảm thiểu lỗi, cải thiện tốc độ phát triển và triển khai, và đảm bảo mã nguồn luôn ở trạng thái sẵn sàng để phát hành.\n"
},
{
	"uri": "/vi/3-ci-cd-a-sample-project_/",
	"title": "Thiết lập CI/CD cho project",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ thiết lập một CI/CD pipeline cơ bản cho một dự án Next.js sử dụng GitHub Actions. Mục tiêu là làm quen với cách tự động hóa quy trình từ khi commit mã nguồn đến khi triển khai ứng dụng lên môi trường sản xuất. Qua đó, bạn sẽ hiểu được cách GitHub Actions có thể giúp tối ưu hóa và tự động hóa các bước phát triển và triển khai trong dự án của mình.\nQuy trình sẽ bao gồm các phần sau:\nChuẩn bị môi trường làm việc bằng cách clone dự án mẫu Next.js và cấu hình các dependencies cần thiết.\nTùy chỉnh và kiểm tra Unit Tests để đảm bảo mã nguồn được kiểm tra đầy đủ trước khi triển khai.\nThiết lập GitHub Actions để tự động hóa quá trình build và kiểm thử mỗi khi có thay đổi mã nguồn.\nTriển khai ứng dụng lên GitHub Pages, giúp chúng ta dễ dàng kiểm tra và sử dụng ứng dụng sau khi được cập nhật.\nVới những phần này, bạn sẽ nắm rõ cách triển khai một quy trình CI/CD đơn giản nhưng hiệu quả cho dự án của mình.\nBước 1: Clone dự án mẫu NextJS về máy\nLink repository: https://github.com/vercel/next.js Bước 2: Chọn folder examples/with-jest và mở trong terminal\nĐây là một dự án Next.js đã được cấu hình sẵn với các unit test. Bước 3: Cài đặt npm dependencies\nChạy lệnh npm install để cài đặt tất cả các dependencies cần thiết cho dự án. Bước 4: Chạy project\nSử dụng lệnh npm run dev để khởi động server phát triển của Next.js. Bước 5 Truy cập vào localhost:3000 để xem ứng dụng đang chạy.\nBước 6: Chỉnh sửa file package.json\nMở file package.json và thay đổi dòng \u0026ldquo;test\u0026rdquo;: \u0026ldquo;jest \u0026ndash;watch\u0026rdquo; thành \u0026ldquo;test\u0026rdquo;: \u0026ldquo;jest \u0026ndash;coverage\u0026rdquo; để xem tỷ lệ độ phủ của các unit test. Bước 7: Chạy lệnh npm run test để thực hiện các bài kiểm thử.\nBước 8: Bảng báo cáo độ phủ của mã nguồn sẽ bao gồm các thông tin như:\nFile: Danh sách các tệp tin đã được kiểm tra. % Stmts: Tỷ lệ phần trăm các câu lệnh (statements) đã được kiểm tra. % Branch: Tỷ lệ phần trăm các nhánh điều kiện (branches) trong mã đã được kiểm tra. % Funcs: Tỷ lệ phần trăm các hàm (functions) đã được kiểm tra. % Lines: Tỷ lệ phần trăm các dòng mã đã được kiểm tra. Uncovered Line #s: Các dòng mã chưa được kiểm tra. Bước 9: Tuỳ chỉnh một số unit test\nMở file app/blog/page.tsx. Thêm hoặc sửa đổi các unit test để bao quát thêm các chức năng hoặc kịch bản cần thiết. Bước 10: Tiếp tục với file app/blog/page.test.tsx\nTiến hành sửa đổi trong file test app/blog/page.test.tsx để phù hợp với bất kỳ thay đổi nào đã thực hiện trong app/blog/page.tsx. Bước 11: Chạy lại bộ kiểm thử\nChạy lệnh npm run test để kiểm tra các unit test. Đảm bảo rằng tất cả các unit test đều thành công và có thêm ít nhất một unit test mới được bao phủ. Bước 12: Đẩy project lên GitHub\nĐảm bảo bạn đã commit tất cả các thay đổi trong Git và đẩy (push) lên repository GitHub của bạn. Bước 13: Đẩy project lên GitHub thành công\nXác nhận rằng project đã được đẩy lên GitHub thành công bằng cách kiểm tra repository của bạn. Bước 14: Trên repository, chọn Actions\nTruy cập vào tab Actions trên GitHub repository của bạn để cấu hình GitHub Actions. Bước 15: Tìm NodeJS và chọn Configure NodeJS\nTìm workflow NodeJS đã được cấu hình sẵn và chọn Configure NodeJS để chỉnh sửa hoặc thiết lập các bước tự động. Bước 16: Giao diện Actions NodeJS\nTại giao diện này, bạn có thể thêm, sửa hoặc xóa các bước cần thiết cho quy trình CI/CD của bạn. Bước 17: Chọn Commit Changes\nSau khi chỉnh sửa xong, chọn Commit Changes để lưu lại các thay đổi trong workflow của bạn. Bước 18: Sau khi commit changes, trong repo sẽ có folder .github/workflows\nFolder này chứa các file .yml để làm việc với GitHub Actions, trong đó bạn có thể xem và chỉnh sửa các công việc CI/CD. Bước 19: Tạo và chuyển sang một branch khác: branch \u0026ldquo;update\u0026rdquo;\nTạo một branch mới tên là \u0026ldquo;update\u0026rdquo; và chuyển sang branch đó.\nThêm một vài dòng code hoặc thực hiện thay đổi cần thiết.\nBước 20: Đẩy code mới lên branch \u0026ldquo;update\u0026rdquo;\nĐẩy (push) các thay đổi lên branch \u0026ldquo;update\u0026rdquo; trên GitHub. Bước 21: Chọn Compare \u0026amp; Pull Request\nTrên GitHub, chọn Compare \u0026amp; Pull Request để bắt đầu quá trình merge code từ branch \u0026ldquo;update\u0026rdquo; vào branch \u0026ldquo;main\u0026rdquo;. Bước 22: Tạo pull request vào branch main\nĐiền thông tin cần thiết và tạo pull request để merge code vào branch chính (main). Bước 23: Hệ thống tự động chạy những công việc đã liệt kê trong file nodejs.yml\nSau khi tạo pull request, GitHub Actions sẽ tự động chạy các công việc được cấu hình trong file nodejs.yml. Bước 24: Vào Actions để kiểm tra chi tiết các công việc đã hoàn thành\nTruy cập vào tab Actions để kiểm tra trạng thái và kết quả của các công việc CI/CD. Bước 25: Vào Settings chọn Pages để Deploy\nVào mục Settings của repository, chọn Pages để cấu hình và triển khai ứng dụng của bạn. Bước 26: Trong phần Source, chọn GitHub Actions\nTrong phần cấu hình Source cho GitHub Pages, chọn GitHub Actions để sử dụng workflow đã thiết lập cho việc deploy. Bước 27: Chọn Configure\nChọn Configure để hoàn tất cấu hình deploy thông qua GitHub Actions. Bước 28: Chọn Commit Changes\nSau khi cấu hình xong, chọn Commit Changes để lưu lại các thay đổi. Bước 29: Merge Pull Request\nSau khi các công việc kiểm thử và xây dựng trên GitHub Actions đã hoàn tất thành công, bạn cần merge pull request từ branch \u0026ldquo;update\u0026rdquo; vào branch \u0026ldquo;main\u0026rdquo;. Bước 30: Merge\nBước 31: Tạo branch \u0026ldquo;production\u0026rdquo;\nChọn New Branch trong mục Code, tạo một branch mới có tên là \u0026ldquo;production\u0026rdquo; Bước 32: Pull Request từ main đến production\nTạo một pull request để merge các thay đổi từ branch \u0026ldquo;main\u0026rdquo; sang branch \u0026ldquo;production\u0026rdquo;. Truy cập vào repository của bạn trên GitHub, chọn Compare \u0026amp; Pull Request từ branch \u0026ldquo;main\u0026rdquo; đến branch \u0026ldquo;production\u0026rdquo;. Bước 33: Thêm title \u0026ldquo;release\u0026rdquo; vào nội dung và chọn Create pull request\nBước 34: Thiết lập hệ thống CI/CD thành công\nSau khi bạn đã tạo và merge pull request từ \u0026ldquo;main\u0026rdquo; sang \u0026ldquo;production\u0026rdquo;, hệ thống CI/CD (GitHub Actions) sẽ tự động chạy các công việc để triển khai (deploy) ứng dụng từ branch \u0026ldquo;production\u0026rdquo;. Kiểm tra các hoạt động này trong tab Actions để đảm bảo tất cả các bước đã được hoàn thành thành công và ứng dụng đã được triển khai lên môi trường production. "
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]